interface types {

  record error {
    message: option<string>
  }

  variant operation-result {
    error(option<error>),
    // TODO this is normally a protobuf.Any type, which could be literally anything. How should this be represented in wit?
    response(string)
  }

  record operation {
    name: string,
    done: bool,
    %result: option<operation-result>,
  }
}

interface client {
  use wasi:io/streams@0.2.0.{pollable};
  use wasi:clocks/monotonic-clock@0.2.0.{duration};
  use types.{operation, error};

  handle: func(
    operation: operation
  ) -> result<operation, error>;

  wait: func(
    id: string,
    duration: option<duration>
  ) -> pollable;
}

interface service {
  use types.{operation, operation-result, error};

  start: func(
  ) -> result<operation, error>;

  get: func(
    id: string
  ) -> result<operation, error>;

  %list: func(
    filter: option<string>
  ) -> result<list<operation>, error>;

  delete: func(
    id: string
  ) -> result<_, error>;

  cancel: func(
    id: string
  ) -> result<_, error>;
}
